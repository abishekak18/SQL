
use day3;
-- drop table employee;
-- drop table branch;

-- CREATE TABLE branch (
-- branch_id INT PRIMARY KEY AUTO_INCREMENT,
-- br_name VARCHAR(30) NOT NULL,
-- addr VARCHAR(200) );


-- CREATE TABLE employee (
-- emp_id INT PRIMARY KEY AUTO_INCREMENT,
-- ename VARCHAR(30) NOT NULL,
-- job_desc VARCHAR(20),
-- salary INT,
-- branch_id INT,
-- CONSTRAINT FK_branchId FOREIGN KEY(branch_id) REFERENCES branch(branch_id)
-- );

-- INSERT INTO branch VALUES(1,"Chennai","16 ABC Road");
-- INSERT INTO branch VALUES(2,"Coimbatore","120 15th Block");
-- INSERT INTO branch VALUES(3,"Mumbai","25 XYZ Road");
-- INSERT INTO branch VALUES(4,"Hydrabad","32 10th Street");

-- INSERT INTO employee VALUES(1,'Ram','ADMIN',1000000,2);
-- INSERT INTO employee VALUES(2,'Harini','MANAGER',2500000,2);
-- INSERT INTO employee VALUES(3,'George','SALES',2000000,1);
-- INSERT INTO employee VALUES(4,'Ramya','SALES',1300000,2);
-- INSERT INTO employee VALUES(5,'Meena','HR',2000000,3);
-- INSERT INTO employee VALUES(6,'Ashok','MANAGER',3000000,1);
-- INSERT INTO employee VALUES(7,'Abdul','HR',2000000,1);
-- INSERT INTO employee VALUES(8,'Ramya','ENGINEER',1000000,2);
-- INSERT INTO employee VALUES(9,'Raghu','CEO',8000000,3);
-- INSERT INTO employee VALUES(10,'Arvind','MANAGER',2800000,3);
-- INSERT INTO employee VALUES(11,'Akshay','ENGINEER',1000000,1);
-- INSERT INTO employee VALUES(12,'John','ADMIN',2200000,1);
-- INSERT INTO employee VALUES(13,'Abinaya','ENGINEER',2100000,2);
-- INSERT INTO employee VALUES(14,'Vidya','ADMIN',2200000,NULL);
-- INSERT INTO employee VALUES(15,'Ranjani','ENGINEER',2100000,NULL);


SELECT * FROM employee;
SELECT * FROM branch;


------------   Joins  --------------------

-- Joins in SQL are used to combine rows from two or more tables based on a related column. They help retrieve meaningful data by linking tables.

-- inner join: Returns only matching rows from both tables.
SELECT employee.emp_id,employee.ename,employee.job_desc,branch.br_name
FROM employee
INNER JOIN branch
ON employee.branch_id=branch.branch_id
ORDER BY emp_id;


-- below query gives same result without using join keyword
SELECT employee.emp_id,employee.ename,employee.job_desc,branch.br_name
FROM employee,branch
WHERE employee.branch_id=branch.branch_id
ORDER BY emp_id;

-- Left join Returns all rows from the left table and matching rows from the right table.
SELECT employee.emp_id,employee.ename,employee.job_desc,branch.br_name
FROM employee
LEFT JOIN branch
ON employee.branch_id=branch.branch_id
ORDER BY emp_id;


-- Right join Returns all rows from the right table and matching rows from the left table.
SELECT employee.emp_id,employee.ename,employee.job_desc,branch.br_name
FROM employee
RIGHT JOIN branch
ON employee.branch_id=branch.branch_id
ORDER BY emp_id;


-- FULL JOIN	Returns all rows when there is a match in either table.

-- Cross join joins each row of first table with every other row of second table
SELECT employee.emp_id,employee.ename,employee.job_desc,branch.br_name
FROM employee
CROSS JOIN branch;


-- displays the employee count in each branch
SELECT b.br_name,COUNT(e.emp_id)
FROM branch as b
JOIN employee as e
ON b.branch_id = e.branch_id
GROUP BY e.branch_id;


